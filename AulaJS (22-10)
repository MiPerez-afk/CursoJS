/*
**index.JS**
-Código 1:                                                                                                                                                         
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('Qual é o seu signo?', (resposta) => {
    console.log(`O signo informado foi: ${resposta}`);
    rl.close();
});

-Código 2:














-----------------------------------------------------------
**readlineSync**
Instalar: **npm install readline-sync**
-Código 1:
// npm install readline-sync
const readline = require('readline-sync');
 
const nome = readline.question("Qual o seu signo?");
console.log(`O signo informado foi ${nome}`);

-Código 1.1:
// npm install readline-sync
const readline = require('readline-sync');

const nome = readline.question("Qual o seu nome? ");
console.log('O nome informado foi %s', nome); 

-Código 1.2
// npm install readline-sync
const readline = require('readline-sync');

const nome = readline.question("Qual o seu nome? ");
console.log(typeof(nome));

-Código 1.3
// npm install readline-sync
const readline = require('readline-sync');

const nome = readline.question("Qual o seu nome? ");
let idade = readline.question("Qual a sua idade? ");
idade = parseInt(idade);

console.log(typeof(idade));

-Código 1.4
// npm install readline-sync
const readline = require('readline-sync');

const nome = readline.question("Qual o seu nome? ");

// let idade = readline.question("Qual a sua idade? ");
// idade = parseInt(idade);

// const idade = parseInt(readline.question("Qual a sua idade? "));

const idade = readline.questionInt("Qual a sua idade? ");
const altura = readline.questionFloat("Qual a sua altura? ");

console.log(typeof(altura));

-Código 1.5(Desafio 1)
// npm install readline-sync
const readline = require('readline-sync');
let multiplicador = 1;
const numero = readline.questionInt("Qual a tabuada que deseja construir? ");

console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
console.log(`${numero} * ${multiplicador} = ${numero * multiplicador++}`);
------------------------------------------------------------------------------
-Código 1.6(Deafio 2)
const readline = require(`readline-sync`);

const nota1 = readline.questionFloat("Indique a primeira nota:")
const nota2 = readline.questionFloat("Indique a segunda nota:")
const nota3 = readline.questionFloat("Indique a terceira nota:")
const nota4 = readline.questionFloat("Indique a quarta nota:")
 media = (nota1 + nota2 + nota3 + nota4)/4
   console.log(`A média final do aluno foi de ${media}`)
------------------------------------------------------------------------------
-Código 2
// npm install readline-sync
const readline = require('readline-sync');

const pessoa = {
    "nome": "Tafarel Chicotti",
    "idade": 32,
    "cidade": "Araraquara",
    "profissao": "Professor",
    "endereco" : {
        "logradouro": "Rua A",
        "complemento": "Frente",
        "numero": 548,
        "bairro": "Jardim Jardinada",
        "cidade": "Araraquara",
        "uf": "São Paulo"
    }
};
console.log(pessoa.endereco.logradouro);

-Código 2.1
const readline = require('readline-sync');

const pessoa = {
    "nome": "Tafarel Chicotti",
    "idade": 32,
    "cidade": "Araraquara",
    "profissao": "Professor",
    "endereco" : {
        "logradouro": "Rua A",
        "complemento": "Frente",
        "numero": 548,
        "bairro": "Jardim Jardinada",
        "cidade": "Araraquara",
        "uf": "São Paulo"
    }
};
console.log(pessoa.endereco.logradouro);
pessoa.endereco.logradouro = "Rua Joao Batista";
console.log(pessoa.endereco.logradouro);
delete pessoa.cidade; // Remover uma propriedade chamada cidade
pessoa.genero = "Bonito"; // Incluir uma propriedade chamada "genero"
console.log(pessoa);

-Código 2.3
// npm install readline-sync
const readline = require('readline-sync');

const lista = ["Teste", "Exemplo", "Agora vai"] // Array ("Lista")

console.log(lista);
// console.log(lista.pop());
// console.log(lista);
// lista.push("Simboragoraja");
// console.log(lista);
// console.log(lista[2]);
delete lista[1];
console.log(lista);
console.log(lista[1]);
lista[1] = "Papai Noel";
console.log(lista);

-Código 3
console.log("Seja bem-vindo ao exército. VC se fudeu");
const idade = 18;
// Se idade >= 18, ENTÃO ESCREVER BEM-VINDO 
if (idade >= 18) {
console.log("Vc será submetido aos exames, então venha no dia 11/09");
} else {
  console.log("Vc ainda não está apto para se inscrever")
}  
-------------------------------------------------------------------------
-Código 3.1(atividade)
/**
 * Solicite um número inteiro no terminal e exibir se é par ou ímpar.
 */

// npm install readline-sync
const readline = require("readline-sync");

// Solicite um número inteiro no terminal
let numero = readline.questionInt('Digite o numero inteiro: ');

// Verificar se o número é par ou ímpar
if (numero % 2 === 0) {
  console.log(`O número ${numero} é par.`);
} else {
  console.log(`O número ${numero} é ímpar.`);
}
---------------------------------------------------------------------------
-Código 3.2(atividade 2)
// npm install readline-sync
const readline = require("readline-sync");
const nota1 = readline.questionFloat('Digite a primeira nota: ');
const nota2 = readline.questionFloat('Digite a segunda nota: ');
const nota3 = readline.questionFloat('Digite a teceira nota: ');
const nota4 = readline.questionFloat('Digite a quarta nota: ')
const media = (nota1 + nota2 + nota3 + nota4)/4

if (media >= 6) {
  console.log(`O aluno/a teve ${media} de media, então ele foi aprovado`);
} else if {
  console.log(`O aluno/a teve ${media} de media, então ele não foi aprovado`);
}
------------------------------------------------------------------------------
-Código 3.3(Desafio)
// npm install readline-sync
const readline = require("readline-sync");

// solicitar o total vendido pelo funcionário
let totalVendido = parseFloat(readline.question('Informe o total vendido pelo funcionario: '));

// calcular o desconto
let desconto = 0
if (totalVendido < 5000) {
  desconto = 0;
} else if (totalVendido <= 10000) {
  desconto = 0.03;
} else if (totalVendido <= 15000) {
  desconto = 0.06;
} else if (totalVendido > 15000) {
  desconto = 0.09;
} 

// Calcular o valor com Desconto
let valorcomDesconto = totalVendido - (totalVendido * desconto);

// Exibir o resultado 
console.log(`Valor Original: R$ ${(totalVendido.toFixed(2))}`);
console.log(`Valor com Desconto: R$ ${(valorcomDesconto.toFixed(2))}`);
console.log(`Taxa de Desconto: R$ ${desconto * 100}%`);
---------------------------------------------------------------------------------
-Código 3.4
*   - Bem-vindo Recruta.
 * Se for maior que 18 e do sexo feminino, perguntar se deseja se alistar.
 * Se a pessoa responder que sim, exibir a mensagem:
 *   - Bem-vindo Guerreira.
 * Senão, exibir uma mensagem de "Obrigado."
 */
const readline = require('readline-sync');

const idade = readline.questionInt("Qual a sua idade? ");
const sexo = readline.question("Qual o seu sexo? M - Masculino | F - Feminino ");

if (idade >= 18 && sexo.toUpperCase() == "M") {
    console.log("Bem-vindo Recruta.");
} else if (idade >= 18 && sexo == "F") {
    const resposta = readline.question("Voce deseja se alistar no exercito? SIM | NAO ").toLowerCase();
    if (resposta == "sim") {
        console.log('Bem-vinda Guerreira');
    } else {
        console.log("Obrigado.");
    }
} else {
    console.log("Obrigado.");
}
-------------------------------------------------------------------------
-Código 4
const readline = require('readline-sync')

const tabuada = readline.questionInt("Informe um numero para a tabuada: ");

for(let multiplicador = 1; multiplicador <=10; multiplicador++) {
    let resultado = tabuada * multiplicador;
    console.log(`${tabuada} x ${multiplicador} = ${resultado}`);
}

-Código 4.1
const readline = require('readline-sync')

const i = readline.questionInt("Informe um numero para a Tabuada : ");
for( let i = 1; i <=10; i++){
    for(let j = 1; j <=10; j++) {
    let resultado = i * j;
    console.log(`${i} x ${j} = ${resultado}`);
    }
    console.log("\n------------\n");
}
-Código 4.3(Desafio)
const readline = require('readline-sync')

for (let i = 0; i < 5; i++) {
      let numero = readline.questionInt("Informe o numero: ");

      let resultado = numero % 2;
      if (resultado ==0) {
        console.log(`O numero ${numero} é par. `);
      } else {
         console.log(`O numero ${numero} é impar. `);
      }
}

-Código 4.4
let contador = 0
while(contador < 5) {
    console.log(contador);
    contador++
}

-Código 4.5
let contador = 0;
console.log('Agora com While');
while(contador < 5) {
    console.log(contador);
    contador++;
}

console.log('Agora com DoWhile');
do {
    console.log(contador);
    contador--;
} while(contador > 0);

-Código 4.6
const readline = require('readline-sync')

let soma = 0;

do {
    let numero = parseFloat(readline.question('Digite um numero: '));
    soma += numero;
    console.log(`Soma atual: ${soma}`);
} while (soma < 100);

console.log(`A soma final é ${soma}, maior  ou igual a 100.`);

-Código 4.7
const readline = require('readline-sync')

const senhaCorreta = '0608';
let tentativas = 0;
let senha;

do {
    senha = readline.question('Informe a senha: ');
    tentativas++;
    
    if (senha === senhaCorreta) {
        console.log('Acesso permitido. ');
        break;
    } else {
        console.log(`Senha incorreta. Tentativa ${tentativas} de 5.`);
    }
} while (tentativas < 5)

if (tentativas === 5 && senha !== senhaCorreta) {
    console.log('Numero máximo de tentativas atingido. Acesso negado.');
}
--------------------------------------------------------------------
-Código 5
Olhar no GitHub do Tafarel:
- Link:https://github.com/tchicotti/curso-js
- Acessar 002-codigo-pratico-js
- 001-funcoes.md

-Código 5.1
const readline = require('readline-sync');

function soma(numero1, numero2) {
    return numero1 + numero2;
}

function subtracao(numero1, numero2) {
    return numero1 - numero2;
}

function multiplicacao(numero1, numero2) {
    return numero1 * numero2;
}

function divisao(numero1, numero2) {
    return numero1 / numero2;
}

const number1 = readline.questionInt("Informe o primeiro numero: ");
const operacao = readline.question("Informe a operacao desejada (+ - * / ): ");
const number2 = readline.questionInt("Informe o segundo numero: ");
let resultado;

if (operacao == "+") {
    resultado = soma(number1, number2);
} else if (operacao == "-") {
    resultado = subtracao(number1, number2);
} else if (operacao == "*") {
    resultado = multiplicacao(number1, number2);
} else if (operacao == "/") {
    resultado = divisao(number1, number2);
}

console.log(`${number1} ${operacao} ${number2} = ${resultado}`);

-Código 5.2
const readline = require('readline-sync');

const num1 = Number(readline.questionFloat('Digite o primeiro numero: '));
const num2 = Number(readline.questionFloat('Digite o segundo numero: '));
const num3 = Number(readline.questionFloat('Digite o terceiro numero: '));

const elevarQuintaPotencia = (n) => n ** 5;

const compararNumeros = (n1, n2) => (n1 > n2 ? n1 : n2);

console.log(`O primeiro número elevado à quinta potência é: ${elevarQuintaPotencia(num1)}`);
console.log(`O maior número entre o segundo e o terceiro é: ${compararNumeros(num2, num3)}`);
-------------------------------------------------------------------
-Código 6
const frutas = ["maçã", "banana", "laranja"];
console.log(frutas);
console.log(frutas[1]);
frutas[1] = "uva";
console.log(frutas);
console.log(frutas.length);
// prop length = Tamanho / Quantidade de Itens

frutas.push(1510, 15, 949);
// fn push = Inserir elementos na última posição do array

frutas.unshift("melancia");
// fn unshift = Inserir elementos na primeira posição do array

console.log(frutas);

console.log(frutas.slice(2,4));
// fn slice = Fatiar a lista

frutas.pop();
console.log(frutas);
// fn pop = Remove o último elemento do array

frutas.shift();
console.log(frutas);
// fn shift = Remove o primeiro elemento do array

const nome = "Juvenal Juvelino Juvenio de Souza";
nome.toUpperCase(); // Transformar em Letras Maiúsculas
nome.toLowerCase(); // Transformar em Letras Mínúsculas
nome.length // Tamanho do texto.
//nome.split(); // Dividir o texto em um Array.
console.log(nome.startsWith("Ju")); // Começando com (Retorna true/false)
console.log(nome.endsWith("za")); // Terminando com (Retorna true/false)
console.log(nome.includes("Geronimo")); // Procura o texto no meio da frase (Retorna true/false)

frutas.

-Código 6.1
* Como trabalhar Arrays e Callbacks
 */

const filtro = fruta => fruta.startsWith("ma");
console.log(frutas);
console.log(frutas.filter(filtro));
console.log(frutas.filter(fruta => fruta.includes("ç")));
// fn filter - Filtrar uma cópia do array baseado em condições estabelecidas no seu callback.

console.log(frutas.find(fruta => fruta.startsWith("m")));
// fn find - Retorna o primeiro elemento que satisfaz a condição ou undefined

console.log(frutas.findIndex(fruta => fruta.startsWith("banana")));
// fn findIndex - Retorna a posição do primeiro elemento que satisfaz a condição ou -1

-Código 7



-------------------------------------------------------------------
-Código Diversão:
// npm install readline-sync
var readlineSync = require('readline-sync'),
  MAX = 100, MIN = 0, value = 50, key;
console.log('\n\n' + (new Array(20)).join(' ') +
  '[A] <- -> [D]  FIX: [BARRA DE ESPAÇO]\n');
while (true) {
  console.log('\x1B[1A\x1B[K|' +
    (new Array(value + 1)).join('-') + 'O' +
    (new Array(MAX - value + 1)).join('-') + '| ' + value);
  key = readlineSync.keyIn('',
    {hideEchoBack: true, mask: '', limit: 'ad '});
  if (key === 'a') { if (value > MIN) { value--; } }
  else if (key === 'd') { if (value < MAX) { value++; } }
  else { break; }
}
console.log('\nO que vc precisa é de ' + value + ' de Trabalhadores');
-------------------------------------------------------------------
**Html + Css:**
-contato.html:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Meu site</title>
    <link rel="stylesheet" href="estilo.css">
</head>
<body>
    <header>
        <h1>Contato</h1>

        <nav>
            <a href="index.html">Inicio</a>
            <a href="quem-somos.html">Quem somos</a>
            <a class="ativo" href="contato.html">Contato</a>
            <!-- a = anchor | link ou âncora -->
        </nav>
    </header>
</body>
</html>
-------------------------------------------------------------------
-estilo.css:
:root {
    --cor-principal: #1ed89b;
    --cor-secundaria: #000;
}
/*
a:link - estilo padrão
a:visited - estilo visitado
a:active - estilo quando clicado
a:hover - estilo quando o mouse passa por cima
*/

header nav a {
    color: var(--cor-secundaria);
    border: 1px solid var(--cor-secundaria);
    padding: 5px;
    text-decoration: none;
}
header nav a:hover, header nav a.item-ativo {
    color: #fff;
    border-color: var(--cor-principal);
    background-color: var(--cor-principal);
}
#inicio {
    min-height: 400px;
    background-color: aliceblue;
}
#quem-somos {
    min-height: 400px;
    background-color: bisque;
}
#contato {
    min-height: 400px;
    background-color: brown;
}
-----------------------------------------------------------------
-index.html:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Meu site</title>
    <link rel="stylesheet" href="estilo.css">
</head>
<body>
    <header>
        <h1>Meu site!</h1>
        <nav>
            <a class="item-menu" href="#inicio">Inicio</a>
            <a class="item-menu" href="#quem-somos">Quem somos</a>
            <a class="item-menu" href="#contato">Contato</a>
            <!-- a = anchor | link ou âncora -->
        </nav>
    </header>
    <section id="inicio"></section>
    <section id="quem-somos"></section>
    <section id="contato"></section>

    <script type="text/javascript">
        const ancoras = document.querySelectorAll('a.item-menu');

        ancoras.forEach(ancora => {
            ancora.addEventListener('click', (event) => {
                event.preventDefault(); // cancelar o comportamento padrão da âncora

                // Remover todas as classes "item-ativo" do meu conjunto
                ancoras.forEach(item => item.classList.remove('item-ativo'));

                // Adicionar a class "item-ativo" no item que clicou.
                ancora.classList.add('item-ativo');
            });
        });
    </script>
</body>
</html>
---------------------------------------------------------------
-quem_somos.html:
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Meu site</title>
    <link rel="stylesheet" href="estilo.css">
</head>
<body>
    <header>
        <h1>Quem somos</h1>
        <nav>
            <a href="index.html">Inicio</a>
            <a class="ativo" href="quem-somos.html">Quem somos</a>
            <a href="contato.html">Contato</a>
            <!-- a = anchor | link ou âncora -->
        </nav>
    </header>
</body>
</html>
/*
